version: '3.8'

networks:
  servers:
    driver: bridge

services:
  db:
    build: .
    command: ["db"]
    networks:
      - servers
    ports:
      - "8083:8083"
    volumes:
      - db_data:/data
    environment:
      - DB_PATH=/data

  balancer:
    build: .
    command: ["lb", "--trace=true"]
    networks:
      - servers
    ports:
      - "8090:8090"
    depends_on:
      server1:
        condition: service_healthy
      server2:
        condition: service_healthy
      server3:
        condition: service_healthy

  server1:
    build: .
    command: ["server", "--port=8080", "--db-host=db"]
    environment:
      CONF_HEALTH_FAILURE: "false"
      CONF_RESPONSE_DELAY_SEC: "0"
    networks:
      - servers
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 1s
      timeout: 1s
      retries: 30
      start_period: 5s
    depends_on:
      db:
        condition: service_started

  server2:
    build: .
    command: ["server", "--port=8080", "--db-host=db"]
    environment:
      CONF_HEALTH_FAILURE: "false"
      CONF_RESPONSE_DELAY_SEC: "0"
    networks:
      - servers
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 1s
      timeout: 1s
      retries: 30
      start_period: 5s
    depends_on:
      db:
        condition: service_started

  server3:
    build: .
    command: ["server", "--port=8080", "--db-host=db"]
    environment:
      CONF_HEALTH_FAILURE: "false"
      CONF_RESPONSE_DELAY_SEC: "0"
    networks:
      - servers
    ports:
      - "8082:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 1s
      timeout: 1s
      retries: 30
      start_period: 5s
    depends_on:
      db:
        condition: service_started

  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    networks:
      - servers
    depends_on:
      balancer:
        condition: service_healthy

volumes:
  db_data: